package amgg.mc_model_dumper;

import mcp.MethodsReturnNonnullByDefault;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.entity.RenderLivingBase;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
import org.apache.logging.log4j.Logger;

import net.minecraft.command.CommandException;
import net.minecraft.command.ICommandSender;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.text.TextComponentString;
import org.intellij.lang.annotations.PrintFormat;
import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector3f;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.EmptyStackException;
import java.util.List;
import java.util.Stack;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.stream.Collectors;

@MethodsReturnNonnullByDefault
@ParametersAreNonnullByDefault
@Mod(
    modid = Properties.MODID,
    name = Properties.NAME,
    version = Properties.VERSION,
    acceptableRemoteVersions = "*"
)
public class ModMain {
    private static Logger logger;

    private static void dumpmodel__entity_all__execute(MinecraftServer server, ICommandSender sender, List<String> args) {
        for(String s : dumpModelCommand.getTabCompletions(server, sender, new String[]{"entity", ""}, null)) {
            try {
                dumpModelCommand.execute(server, sender, new String[]{"entity", s});
            } catch (CommandException e) {
                logger.warn(e);
            }
        }
    }

    @EventHandler
    public void preInit(FMLPreInitializationEvent event) {
        logger = event.getModLog();
    }

    @EventHandler
    public void init(FMLInitializationEvent event) {
    }

    @EventHandler
    public void serverStarting(FMLServerStartingEvent event) {
        event.registerServerCommand(dumpModelCommand);
    }

    public static final AMGGCommandBase dumpModelCommand =
        new AMGGCommandParent("dumpmodel")
            .addSubcommand(
                new AMGGCommandLeaf("entity_all",
                    ModMain::dumpmodel__entity_all__execute, // had to factor out b/c/o self reference.
                    (server, sender, args, targetPos, argsIdx) -> null
                )
            )
            .addSubcommand(
                new AMGGCommandLeaf("entity",
                    (server, sender, args) -> {
                        logger.info("{}", args);
                        if(args.size() < 1) throw new CommandException("argument [class] not specified");
                        String clzname = args.get(0);
                        Class<?> clz;
                        try {
                            clz = Class.forName(clzname);
                        } catch (ClassNotFoundException e) {
                            throw new CommandException("can't find class for name " + clzname);
                        }
                        if(!net.minecraft.entity.Entity.class.isAssignableFrom(clz)) {
                            throw new CommandException("class " + clzname + " not assignable to net.minecraft.entity.Entity");
                        }
                        net.minecraft.client.renderer.entity.Render<? extends net.minecraft.entity.Entity> renderer = Minecraft.getMinecraft().getRenderManager().entityRenderMap.get(clz);
                        if(renderer == null) throw new CommandException("no renderer found for class " + clzname);
                        if(!RenderLivingBase.class.isAssignableFrom(renderer.getClass())) throw new CommandException("associated renderer doesn't derive from RenderLivingBase");
                        RenderLivingBase<?> rendererRLB = (RenderLivingBase<?>)renderer;
                        OBJBuilder obj = new OBJBuilder()
                            .addFormat("# generated by %s version %s", Properties.NAME, Properties.VERSION)
                            .pushMatrix(new Matrix4f().scale(new Vector3f(1, -1, 1)));
                        obj.forEach(rendererRLB.getMainModel().boxList, OBJBuilder::addModel);
                        try {
                            String filename = String.format("./%s.%s.obj", clzname, (new SimpleDateFormat("yyyyMMddhhmmss").format(new Date())));
                            Path filepath = Paths.get(filename);
                            Files.write(
                                filepath,
                                obj.finish().getBytes(StandardCharsets.UTF_8)
                            );
                            sender.sendMessage(new TextComponentString(new AMGGStringBuilder()
                                .addFormat("saved to %s", filepath.toAbsolutePath().toString())
                                .finish()
                            ));
                        } catch (IOException e) {
                            throw new CommandException("error saving obj", e);
                        }
                    },
                    (server, sender, args, targetPos, argsIdx) ->
                        Minecraft.getMinecraft().getRenderManager().entityRenderMap.keySet().stream()
                            .map(Class::getName)
                            .filter(s -> s.startsWith(args[argsIdx]))
                            .collect(Collectors.toList())
                )
            )
        ;

}
